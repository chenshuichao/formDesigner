{"remainingRequest":"/home/wison/dev/workspace1/front-end/formDesigner/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/wison/dev/workspace1/front-end/formDesigner/src/components/custom/configs/checkbox.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/home/wison/dev/workspace1/front-end/formDesigner/src/components/custom/configs/checkbox.vue","mtime":1587901595554},{"path":"/home/wison/dev/workspace1/front-end/formDesigner/node_modules/css-loader/dist/cjs.js","mtime":1587901594897},{"path":"/home/wison/dev/workspace1/front-end/formDesigner/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1587901595491},{"path":"/home/wison/dev/workspace1/front-end/formDesigner/node_modules/postcss-loader/src/index.js","mtime":1587901595207},{"path":"/home/wison/dev/workspace1/front-end/formDesigner/node_modules/sass-loader/dist/cjs.js","mtime":1587901595377},{"path":"/home/wison/dev/workspace1/front-end/formDesigner/node_modules/cache-loader/dist/cjs.js","mtime":1587901594804},{"path":"/home/wison/dev/workspace1/front-end/formDesigner/node_modules/vue-loader/lib/index.js","mtime":1587901595491}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCkBpbXBvcnQgIi4uLy4uL3N0eWxlL2Rlc2lnbmVyLnNjc3MiOwo="},{"version":3,"sources":["checkbox.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+KA","file":"checkbox.vue","sourceRoot":"src/components/custom/configs","sourcesContent":["<template>\n  <div v-show=\"props.compType === 'checkbox'\">\n    <!-- <el-form-item label=\"字段名\">\n      <el-input class=\"input\" v-model=\"props\"></el-input>\n    </el-form-item> -->\n    <el-form-item label=\"标题\">\n      <el-input class=\"input\" v-model=\"props.label\"></el-input>\n    </el-form-item>\n    <el-form-item label=\"提示符\">\n      <el-input class=\"input\" v-model=\"props.placeholder\" placeholder=\"请输入提示符\"/>\n    </el-form-item>\n    <el-form-item label=\"表单栅格\">\n      <el-slider class=\"input\" v-model=\"props.span\" :max=\"24\" :min=\"1\" :marks=\"{12:''}\"></el-slider>\n    </el-form-item>\n    <el-form-item label=\"栅格间隔\">\n      <el-input-number v-model=\"props.gutter\"  :min=\"0\"></el-input-number>\n    </el-form-item>\n    <el-form-item label=\"标签宽度\">\n      <el-input-number v-model=\"props.labelWidth\"  :min=\"1\" :max=\"200\"></el-input-number>\n    </el-form-item>\n    <el-form-item label=\"显示标签\">\n      <el-switch v-model=\"props.showLabel\" @change=\"handlerChangeLabel\"></el-switch>\n    </el-form-item>\n    <el-form-item label=\"必填\">\n      <el-switch v-model=\"props.required\"></el-switch>\n    </el-form-item>\n    <el-form-item label=\"最小数量\">\n      <el-input-number v-model=\"props.min\"  :min=\"1\" ></el-input-number>\n    </el-form-item>\n    <el-form-item label=\"最大数量\">\n      <el-input-number v-model=\"props.max\"  :min=\"1\" ></el-input-number>\n    </el-form-item>\n    <el-form-item label=\"选项样式\">\n      <el-radio-group v-model=\"props.optionType\">\n        <el-radio-button label=\"default\">默认</el-radio-button>\n        <el-radio-button label=\"button\">按钮</el-radio-button>\n      </el-radio-group>\n    </el-form-item>\n    <el-form-item label=\"显示边框\">\n      <el-switch v-model=\"props.border\"></el-switch>\n    </el-form-item>\n    <el-form-item label=\"选项尺寸\" v-show=\"props.border||props.optionType ==='button'\">\n      <el-radio-group v-model=\"props.size\">\n        <el-radio-button label=\"medium\">正常</el-radio-button>\n        <el-radio-button label=\"small\">略小</el-radio-button>\n        <el-radio-button label=\"mini\">迷你</el-radio-button>\n      </el-radio-group>\n    </el-form-item>\n    <el-form-item label=\"禁用\">\n      <el-switch v-model=\"props.disabled\" @change=\"handlerChangeDisStatus('disabled')\"></el-switch>\n    </el-form-item>\n    <el-form-item label=\"默认值\">\n      <el-input\n        :value=\"setDefaultValue(props.value)\"\n        placeholder=\"请输入默认值\"\n        @input=\"onDefaultValueInput\"\n      />\n    </el-form-item>\n    <el-divider>选项</el-divider>\n    <draggable\n      :list=\"props.options\"\n      :animation=\"340\"\n      group=\"selectItem\"\n      handle=\".option-drag\"\n    >\n      <div v-for=\"(item, index) in props.options\" :key=\"index\" class=\"select-item\">\n        <div class=\"select-line-icon option-drag\">\n          <i class=\"el-icon-s-operation\" />\n        </div>\n        <el-input v-model=\"item.label\" placeholder=\"选项名\" size=\"small\" />\n        <el-input\n          placeholder=\"选项值\"\n          size=\"small\"\n          :value=\"item.value\"\n          @input=\"setOptionValue(item, $event)\"\n        />\n        <div class=\"close-btn select-line-icon\" @click=\"activeData.options.splice(index, 1)\">\n          <i class=\"el-icon-remove-outline\" />\n        </div>\n      </div>\n    </draggable>\n    <div style=\"margin-left: 20px;\">\n      <el-button\n        style=\"padding-bottom: 0\"\n        icon=\"el-icon-circle-plus-outline\"\n        type=\"text\"\n        @click=\"addSelectItem\"\n      >\n        添加选项\n      </el-button>\n    </div>\n  </div>\n</template>\n<script>\nimport draggable from \"vuedraggable\";\nimport { isNumberStr } from '../../utils/index'\n/**\n * input的配置项\n */\nlet vm = {\n  name:\"inputConfig\",\n  props:{\n    props:{}\n  },\n  components:{\n    draggable\n  },\n  data(){\n    return {\n      val:123\n    }\n  },\n  methods:{\n    handlerChangeLabel(val){\n      this.props.labelWidth = val?'80':'1'\n    },\n    handlerChangeDisStatus(val){\n      this.props.readOnly = val?false:true\n    },\n    handlerChangeReadStatus(val){\n      this.props.disabled = val?false:true\n    },\n    setDefaultValue(val) {\n      if (Array.isArray(val)) {\n        return val.join(',')\n      }\n      if (['string', 'number'].indexOf(val) > -1) {\n        return val\n      }\n      if (typeof val === 'boolean') {\n        return `${val}`\n      }\n      return val\n    },\n    onDefaultValueInput(str) {\n      if (Array.isArray(this.props.value)) {\n        // 数组\n        this.$set(\n          this.props,\n          'value',\n          str.split(',').map(val => (isNumberStr(val) ? +val : val))\n        )\n      } else if (['true', 'false'].indexOf(str) > -1) {\n        // 布尔\n        this.$set(this.props, 'value', JSON.parse(str))\n      } else {\n        // 字符串和数字\n        this.$set(\n          this.props,\n          'value',\n          isNumberStr(str) ? +str : str\n        )\n      }\n    },\n    setOptionValue(item,val){\n      item.value = isNumberStr(val) ? +val : val\n    },\n    addSelectItem(){\n      this.props.options.push({\n        label: '',\n        value: ''\n      })\n    },\n    multipleChange(val){\n    //   this.$set(this.props, 'value', val ? [] : '')\n    }\n  },\n  mounted(){\n  },\n  watch: {\n  }\n}\nexport default vm;\n</script>\n<style lang=\"scss\">\n@import \"../../style/designer.scss\";\n</style>"]}]}